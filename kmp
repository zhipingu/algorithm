int *get_next(string pattern)
{
	int *next = new int[pattern.size()]();
	next[0] = -1;
	int k = next[0]; // k代表当前i的next[i],0~k-1全部匹配，即P[0 ~ k-1] == P[j-k ~ j-1]
	int i = 0;
	while(i<pattern.size()-1)
	{
		if (k == -1 || pattern[i] == pattern[k])
		{
			next[++i] = ++k;
		}
		else
		{
			k = next[k]; //当前i的下一个位置处的值p[next[i]]!=p[i]时，继续试探下一个位置
		}
	}

	return next;
}

int kmp(string str, string pattern)
{
    if(str.empty() && pattern.empty())
        return 0;
        
    if(pattern.empty())
        return 0;
    if(str.empty())
        return -1;
        
	int i = 0, j = 0;
	int *next = get_next(pattern);
	for (int i = 0; i < pattern.size(); ++i)
		cout << next[i] << " ";
	cout << endl;
	while (j==-1 || i < str.size() && j < pattern.size())
	{
		if (j==-1 || str[i] == pattern[j])
		{
			i++;
			j++;
		}
		else
			j = next[j];
	}
	if (j == pattern.size())
		return i - j;
	else
		return -1;
}
