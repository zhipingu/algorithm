You are given coins of different denominations and a total amount of money amount. Write a function to compute the
fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of 
the coins, return -1.You may assume that you have an infinite number of each kind of coin.


int coinChange(vector<int>& coins, int amount) {
        vector<int>dp(amount+1,10000000);
        dp[0]=0;//0种硬币兑换0元,最少用0张钱
        
        for(int i=0;i<coins.size();++i)
            for(int j=coins[i];j<=amount;++j)
            {
                dp[j]=dp[j] < dp[j-coins[i]]+1 ? dp[j] : dp[j-coins[i]]+1;
                // dp[j] = std::min(dp[j],dp[j-coins[i]]+1);
            }
        if(dp[amount]==10000000)
             return -1;
        return dp[amount];
        
    }
